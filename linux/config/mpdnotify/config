#!/bin/bash
#
# mpdnotify config - any valid bash is allowed, you
# only need to define handle_event() for the deamon
# to run properly
#
# $mydir exists, and it's value is /home/nate/.config/mpdnotify
#
###

###
#
# the actual handle_event() definition
#
# this is the only requirement for a valid config
#
###

# Constants
if [ "$MPD_HOST" ]; then HOST="$MPD_HOST"; else HOST="localhost"; fi
if [ "$MPD_PORT" ]; then PORT="$MPD_PORT"; else PORT="6600"; fi
MPD_TCP="/dev/tcp/$HOST/$PORT"
coverDir="$HOME/Music/.covers/"
tmpCover="/tmp/cover"
baseCover="/usr/share/mpd-libnotify/extras/base.png"
topCover="/usr/share/mpd-libnotify/extras/top.png"
noCover="$HOME/.config/mpdnotify/nocover.png"
myPID="$HOME/.config/mpdnotify/pid"
mpdPID=$(pidof mpd)
mpdArtist="Could not find Artist's name"
mpdTitle="Could not find Song's title"
mpdAlbum="Could not find Album's name"
mpcLength="Could not find Song's length"
mpcInfo="Cound not find Song's info"
showCover="true"
expireTime="5000"
#logout="true"



function mpd_sndcommmand() {
	# $1 command
	exec 5<> $MPD_TCP 2>/dev/null
	[[ $? -gt 0 ]] && return 1
	echo $1 >&5
	echo "close" >&5
	tmp=$(cat <&5)
	exec 5>&-
	_ret=$(head -n -1 <<< "$tmp" | tail -n +2)
	return 0
}

function mpd_getinfo() {
	mpd_sndcommmand currentsong
	[[ $? -gt 0 ]] && return 1
	_tmp=$_ret
	mpdTitle=$(grep "^Title: " <<< "$_tmp" 2>/dev/null | sed "s/Title: //")
	mpdArtist=$(grep "^Artist: " <<< "$_tmp" 2>/dev/null | sed "s/Artist: //")
	mpdAlbum=$(grep "^Album: " <<< "$_tmp" 2>/dev/null | sed "s/Album: //")
	mpd_sndcommmand "status"
	_tmp=$_ret
}


function fetch_cover() {
  album=$1
  artist=$2
  file="$coverDir/$album"
  if [ ! -f "$file" ] ; then
	logger "$file is not in covers... " >/dev/null
		url="http://www.seekacover.com/cd/${album// /+}+${artist// /+}"
		cover_url=$(curl -s "$url" | awk -F 'src=' '/image/ {print $2}' | cut -d '"' -f 2 | grep -v '^$' | head -n1)
		if [ -n "$cover_url" ]; then
		  logger "$file retrieved and placed in covers directory..." >/dev/null
		  wget -q -O "$file" "$cover_url"
		else
		  logger "ERROR: Album cover not found online. Searched for: ${album// /+}" >/dev/null
	    fi
  fi
}

handle_event() {
	# Only send a notification on new tracks
	[ "$mpdArtist - $mpdTitle" == "`mpc current`" ] && isSameTrack=1 || isSameTrack=0
	
	if [[ -z $mpdPID ]]; then
		echo "MPD is not currently running!"
		if [[ -f "$myPID" ]]; then
			rm "$myPID"
		fi
		exit
	else
		mpd_getinfo
		if [ "${showCover}" = "true" ]; then
			if [ -f "/tmp/cover" ]; then rm /tmp/cover; fi
			if [ -f "$coverDir/$mpdAlbum" ]; then
				cp "$coverDir/$mpdAlbum" /tmp/cover
			else
				fetch_cover "$mpdAlbum" "$mpdArtist"
				if [ -f "$coverDir/$mpdAlbum" ]; then
					cp "$coverDir/$mpdAlbum" /tmp/cover
				else
					cp "$noCover" /tmp/cover
				fi
			fi

			mogrify -resize 128x128! $tmpCover
			#mogrify -resize 65x65! $tmpCover
			#convert $baseCover "$tmpCover" -geometry +4+3 -composite $topCover -geometry +0+0 -composite "$tmpCover"
			#mpdAlbum=$(echo "$mpdAlbum" | sed -e 's/&/&amp;/')
			#mpdTitle=$(echo "$mpdTitle" | sed -e 's/&/&amp;/')
			#mpdArtist=$(echo "$mpdArtist" | sed -e 's/&/&amp;/')
			[[ "${#mpdArtist}" -gt "25" ]] && mpdArtist=$(echo "${mpdArtist:0:25}...")
			[[ "${#mpdTitle}" -gt "25" ]] && mpdTitle=$(echo "${mpdTitle:0:25}...")
			[[ "${#mpdAlbum}" -gt "25" ]] && mpdAlbum=$(echo "${mpdAlbum:0:25}...")
			if [[ $isSameTrack == 0 ]]; then
				notify-send --expire-time="${expireTime}" -i "${tmpCover}" "${mpdTitle}" "$(echo "${mpdArtist} &#8212; ${mpdAlbum}";)"
			fi

		else
			if [[ $isSameTrack == 0 ]]; then
				notify-send --expire-time="${expireTime}" "${mpdTitle}" "$(echo "${mpdArtist} &#8212; ${mpdAlbum}")"
			fi
		fi



		if [ "$logout" == "true" ]; then
			echo -e "$mpdTitle \n $mpdArtist \n $mpdAlbum \n" > $HOME/mpdout
		fi
	fi
}

# handle_event() {
#	 mpdnotify &
# }

