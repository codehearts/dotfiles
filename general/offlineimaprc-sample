# Sample .offlineimaprc for using offlineimap with Gmail and other email accounts.
# This config assumes that passwords are stored in GNOME Keyring.
# It's not difficult, see my Wiki article on it:
# https://github.com/codehearts/dotfiles/wiki/offlineimap
#
# Replace <user> with the name of your user directory
# Replace /path/to/offlineimap.py with the path to offlineimap.py
#
# Replace <gmail_address> with a Gmail address
# Replace <school_address> with a school address managed through Gmail
# Replace <custom_address> with a non-Gmail address
# Replace <custom_host> with the SMTP hostname for the custom address
# Replace <custom_port> with the SMTP port for the custom address

[general]
accounts = Gmail,School,Custom
pythonfile = /path/to/offlineimap.py
ui = ttyui
# Improves performance, but might miss emails on the first sync
fsync = False

[Account Gmail]
localrepository = Gmail-local
remoterepository = Gmail-remote

[Repository Gmail-local]
type = GmailMaildir
localfolders = /home/<user>/Mail/Gmail
# Rename Inbox to INBOX, add the [Gmail]/ prefix for the remote server
nametrans = lambda folder: {
  'Inbox':       'INBOX',
  'Drafts':      '[Gmail]/Drafts',
  'Sent':        '[Gmail]/Sent Mail',
  'Flagged':     '[Gmail]/Starred',
  'Trash':       '[Gmail]/Trash',
  'Mac Archive': 'Archive',
  'Archive':     '[Gmail]/All Mail',
  }.get(folder, folder)

[Repository Gmail-remote]
type = Gmail
remoteuser = <gmail_address>
remotepasseval = keyring.get_password("offlineimap", "<gmail_address>")
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
ssl_version = tls1_2
# Rename INBOX to Inbox, remove the [Gmail]/ prefix for our local copy
nametrans = lambda folder: {
  'INBOX':             'Inbox',
  '[Gmail]/Drafts':    'Drafts',
  '[Gmail]/Sent Mail': 'Sent',
  '[Gmail]/Starred':   'Flagged',
  '[Gmail]/Trash':     'Trash',
  'Archive':           'Mac Archive',
  '[Gmail]/All Mail':  'Archive',
  }.get(folder, folder)
# Ignore these folders
folderfilter = lambda folder: folder not in [
  '[Gmail]/Trash',
  '[Gmail]/Spam',
  '[Gmail]/Important',
  '[Gmail]/All Mail',
  'Misc',
  'Follow Up',
  ]

# School Gmail Account

[Account School]
localrepository = School-local
remoterepository = School-remote

[Repository School-local]
type = GmailMaildir
localfolders = /home/<user>/Mail/School
# Rename Inbox to INBOX, add the [Gmail]/ prefix for the remote server
nametrans = lambda folder: {
  'Inbox':       'INBOX',
  'Drafts':      '[Gmail]/Drafts',
  'Sent':        '[Gmail]/Sent Mail',
  'Flagged':     '[Gmail]/Starred',
  'Trash':       '[Gmail]/Trash',
  'Mac Archive': 'Archive',
  'Archive':     '[Gmail]/All Mail',
  }.get(folder, folder)

[Repository School-remote]
type = Gmail
remoteuser = <school_address>
remotepasseval = keyring.get_password("offlineimap", "<school_address>")
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
# Rename INBOX to Inbox, remove the [Gmail]/ prefix for our local copy
nametrans = lambda folder: {
  'INBOX':             'Inbox',
  '[Gmail]/Drafts':    'Drafts',
  '[Gmail]/Sent Mail': 'Sent',
  '[Gmail]/Starred':   'Flagged',
  '[Gmail]/Trash':     'Trash',
  'Archive':           'Mac Archive',
  '[Gmail]/All Mail':  'Archive',
  }.get(folder, folder)
# Ignore these folders
folderfilter = lambda folder: folder not in [
  '[Gmail]/Trash',
  '[Gmail]/Spam',
  '[Gmail]/Important',
  '[Gmail]/All Mail',
  'Misc',
  'Follow Up',
  ]

# Custom Account

[Account Custom]
localrepository = Custom-local
remoterepository = Custom-remote

[Repository Custom-local]
type = Maildir
localfolders = /home/<user>/Mail/Custom
# Rename Inbox to INBOX, add the INBOX. prefix for the remote server
nametrans = lambda folder: 'INBOX' if folder == 'Inbox' else 'INBOX.'+folder

[Repository Custom-remote]
type = IMAP
remoteport = <custom_port>
remotehost = <custom_host>
remoteuser = <custom_email>
remotepasseval = keyring.get_password("offlineimap", "<custom_email>")
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
# Rename INBOX to Inbox, remove the INBOX. prefix for our local copy
nametrans = lambda folder: 'Inbox' if folder == 'INBOX' else re.sub('^INBOX\.', '', folder)
