" Kate Hart's .vimrc
" github.com/codehearts/dotfiles
"

call plug#begin('~/.vim/plugged')

" vim
Plug 'tpope/vim-sensible'

" colors
Plug 'rhysd/vim-color-spring-night'
Plug 'NLKNguyen/papercolor-theme'
Plug 'vectorstorm/vim-chlordane'
Plug 'liuchengxu/space-vim-dark'
Plug 'cseelus/vim-colors-lucid'
Plug 'snowcrshd/cyberpunk.vim'
Plug 'roosta/vim-srcery'
Plug 'trusktr/seti.vim'
Plug 'jyota/vimColors' " eva, scooby
Plug 'tomasr/molokai'

" writing
Plug 'garbas/vim-snipmate' | Plug 'honza/vim-snippets' | Plug 'MarcWeber/vim-addon-mw-utils' | Plug 'tomtom/tlib_vim'
Plug 'scrooloose/nerdcommenter'
Plug 'junegunn/vim-easy-align'
Plug 'vim-syntastic/syntastic'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'ervandew/supertab'

" ui
Plug 'vim-airline/vim-airline'
Plug 'scrooloose/nerdtree'
Plug 'mhinz/vim-startify'
Plug 'majutsushi/tagbar'

" git
Plug 'tpope/vim-fugitive'

" latex
Plug 'LaTeX-Box-Team/LaTeX-Box', { 'for': 'tex' }

" coffee script
Plug 'kchmck/vim-coffee-script'

call plug#end()

"
" gui
"

if has('gui_running') " gvim/mvim
  set bg=dark
  colorscheme lucid

  set go-=r go-=L go-=m go-=T " remove scrollbar and toolbar from gui

  if has('macunix') " macOS
    set gfn=Input\ Mono:h11

    " use `open` to view latex output on macOS
    let g:LatexBox_viewer='open'
  elseif has('win32') || has('win64') " windows
    set gfn=Hack:h8
    set go=c " don't use gui prompts
    set rop=type:directx,\gamma:1.5,contrast:0.5,geom:1,\renmode:5,taamode:1,level:0.5 " directx renering
  else " linux
    set gfn=Meslo\ LG\ S\ for\ Powerline\ 8
  endif
else " terminal
  colorscheme srcery
endif

"
" settings
"

set et ts=2 sw=2 " use spaces, 1 tab is 2 spaces
set noswf " don't use swap files
set hls   " highlight search matches

"
" assignments
"

" use symbols with airline
let g:airline_powerline_fonts=1
" compile latex asynchronously on write, quickfix won't steal cursor
let g:LatexBox_latexmk_preview_continuously=1
let g:LatexBox_latexmk_async=1
let g:LatexBox_quickfix=2
" use nicer symbols with syntastic
let g:syntastic_error_symbol='✖'
let g:syntastic_warning_symbol='⚠'
" set <leader> to ,
let mapleader=","

"
" bindings
"

" j/k stay on wrapped lines
map j gj
map k gk
" switch windows with ctrl-h/j/k/l
map <C-h> <C-W>h
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-l> <C-W>l
" write using sudo
cmap w!! %!sudo tee > /dev/null %

" write
nmap <leader>w :w!<cr>
" tabs
map <leader>tn :tabnew<cr>
map <leader>tc :tabclose<cr>
map <leader>th :tabm-1<cr>
map <leader>tl :tabm+1<cr>
" cd to open buffer's pwd
map <leader>cd :cd %:p:h<cr>:pwd<cr>
" spell checking
map <leader>ss :setlocal spell!<cr>
" line numbers
map <leader>nu :setlocal nu!<cr>
" vimgrep (manual typing, word under cursor)
map <leader>gt :noautocmd vimgrep //gj ./**/* <bar> cw<C-left><C-left><C-left><C-left><right>
map <leader>gw :execute 'noautocmd vimgrep /' . expand('<cword>') . '/gj ./**/*' <bar> cw<cr>
" regex replace (manual typing, word under cursor)
map <leader>rt :%s //g<left><left>
map <leader>rw :execute '%s /' . expand('<cword>') . '/' . input(expand('<cword>') . '▶') . '/g'<cr>
" vim-plug
map <leader>pi :PlugInstall<cr>
map <leader>pu :PlugUpgrade <bar> PlugUpgrade <bar> PlugClean<cr>
" nerd tree
map <leader>nt :NERDTreeToggle<cr>
map <leader>mt :NERDTreeMirror<cr>
" tagbar
map <leader>tb :TagbarToggle<cr>
" easy align
xmap ga <plug>(EasyAlign)
nmap ga <plug>(EasyAlign)

"
" file types
"

let g:python_recommended_style = 0 " don't use PEP8 styling for python
autocmd FileType mail setlocal spell spl=en_us " spellcheck email
autocmd FileType mail setlocal fo+=aw          " don't automatically break lines in emails

"
" startify header
"

function! s:center_text(lines) abort
  let longest_line   = strwidth(a:lines[0])
  let centered_lines = map(copy(a:lines),
    \ 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
  return centered_lines
endfunction

let g:wired_ascii = [
  \ '                       `--.                       ',
  \ '                   ``.-ssss-.``                   ',
  \ '               `..-----/oo+------..               ',
  \ '            `.---::::::://:::::::---.`            ',
  \ '          `-::::::/++oooooooo++/::::::-`          ',
  \ '        ./ssss//+osssssssssssssso+/:osss+-`       ',
  \ '     `-+ssso+/+osssso++++++++osssso+/+ossso/.     ',
  \ '   ./osso/::/+ssss+++ooossooo+++sssso/::/+sss+.   ',
  \ ' `+sss+:-:::+ssso++osssssssssso++osss+:::-:/sss+. ',
  \ '.oss+..--::/ssss++osssssssssssso++osss/::--..+sss-',
  \ 'osss` .-:::/ssso++sssssssssssssoo+osss/:::--  osso',
  \ '+sss. `-:::/ssso++sssssssssssssoo+osss/:::-- `ssso',
  \ '`+sss:.--::/osss++osssssssssssso++ssss/::--.:osso.',
  \ ' `:osso/::::/osss++oossssssssoo++ssss+::::/osso:` ',
  \ '   `:+ssso+/:/ossso+++oooooo+++ossso+://oosso:`   ',
  \ '  -::`.:ossso+/+ossssoo////oossssso//ossso/..-:-  ',
  \ ' -sss+  `./oso/:/+ossss/:::sssso+/::oso+.`  +sss- ',
  \ ' `:+/.     `---::::osss----osso:::::--.     ./+:` ',
  \ '             `.---:osso....+sso:----`             ',
  \ '                `.-+sso````+sso..``               ',
  \ '          -/:`     /sso    +ss+      :/-          ',
  \ '         .sss:     +sso    +sso     -sss.         ',
  \ '         `ssso.  `:sss+    /sss/.  .+sss.         ',
  \ '          -ssssssssss+`     +ssssssssss:          ',
  \ '           `-/+oo+/:.        .:/+oo+/-`           ',
  \ ]
let g:startify_custom_header = s:center_text(g:wired_ascii)
