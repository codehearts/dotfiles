" codehearts .vimrc
" github.com/codehearts/dotfiles
" vim: et:ts=2:sw=2
"

call plug#begin('~/.vim/plugged')

" vim
Plug 'tpope/vim-sensible'

" colors
Plug 'sansbrina/vim-garbage-oracle', { 'branch': 'release' }
Plug 'lu-ren/SerialExperimentsLain'
Plug 'rhysd/vim-color-spring-night'
Plug 'soft-aesthetic/soft-era-vim'
Plug 'vectorstorm/vim-chlordane'
Plug 'reedes/vim-colors-pencil'
Plug 'cseelus/vim-colors-lucid'
Plug 'srcery-colors/srcery-vim'
Plug 'sainnhe/gruvbox-material'
Plug 'dennougorilla/azuki.vim'
Plug 'cseelus/vim-colors-tone'
Plug 'srijs/vim-colors-rusty'
Plug 'wadackel/vim-dogrun'
Plug 'tjammer/blayu.vim'
Plug 'abnt713/vim-hashpunk'
Plug 'yuttie/hydrangea-vim'
Plug 'beikome/cosme.vim'
Plug 'smallwat3r/vim-mono-sw'
Plug 'sonjapeterson/1989.vim'
Plug 'kocakosm/hilal'
Plug 'kristiandupont/shades-of-teal'
Plug 'carlson-erik/wolfpack'
Plug 'jcherven/jummidark.vim'
Plug 'franbach/miramare'
Plug 'sjl/badwolf'
Plug 'bcicen/vim-vice'
Plug 'mbbill/vim-seattle'
Plug 'AlessandroYorba/Sierra'

" editor
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'dense-analysis/ale'
Plug 'janko-m/vim-test'
Plug 'tmsvg/pear-tree'

" ui
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-airline/vim-airline'
Plug 'codehearts/mascara-vim'
Plug 'liuchengxu/vista.vim'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'mhinz/vim-startify'

" git
Plug 'tpope/vim-fugitive'

" rust
Plug 'rust-lang/rust.vim', { 'for': 'rust' }

" python
Plug 'plytophogy/vim-virtualenv', { 'for': 'python' }
Plug 'vim-python/python-syntax'

call plug#end()

"
" interface
"

if has('gui_running') " gui
  set bg=dark
  colorscheme lucid

  set go-=r go-=L go-=m go-=T " remove scrollbars and toolbar from gui
  set go+=! " use a full terminal for :sh
  set gfn=DankMono-Regular:h12

  if has('macunix') " macOS
  elseif has('win32') || has('win64') " windows
    set rop=type:directx,\gamma:1.5,contrast:0.5,geom:1,\renmode:5,taamode:1,level:0.5 " directx rendering
  else " linux
  endif
else " term
  colorscheme srcery
endif

"
" settings
"

set et ts=2 sw=2 " use spaces, 1 tab is 2 spaces
set noswf " don't use swap files
set ic scs hls " ignore case, smart case, highlight search matches
set enc=utf-8 " use utf-8 encoding
set nu rnu " show relative line numbers
set fcs=vert:⎸ " use nicer characters for splits

"
" plugin assignments
"

" highlight everything in python files
let g:python_highlight_all = 1

" use symbols with airline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'lucius'

" use nicer symbols with ale
let g:ale_sign_error = '禁'
let g:ale_sign_warning = '可'
" use nicer symbols for ale with airline
let airline#extensions#ale#error_symbol = g:ale_sign_error
let airline#extensions#ale#warning_symbol = g:ale_sign_warning
let airline#extensions#ale#open_lnum_symbol = ''
let airline#extensions#ale#close_lnum_symbol = ''
" don't log ale linter output
let g:ale_history_log_output = 0
" specify lsp and linters
let g:ale_linters = { 'rust': ['analyzer'] }
" specify fixers for ale
let g:ale_fixers = { 'rust': [ 'rustfmt' ], 'javascript': [ 'prettier' ], 'typescript': [ 'eslint' ] }
" fix syntax when saving buffers
let g:ale_fix_on_save=1

" cd to repo root from startify
let g:startify_change_to_vcs_root = 1

" use ale with vista to default to lsp
let g:vista_default_executive = 'ale'
" don't display icons in vista
let g:vista#renderer#enable_icon = 0

" set <leader> to ,
let mapleader = ","

" use asyncomplete for completion with ale
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ale#get_source_options())

"
" bindings
"

" switch windows with ctrl-h/j/k/l
map <C-h> <C-W>h
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-l> <C-W>l
" write using sudo
cmap w!! %!sudo tee > /dev/null %

" write
nmap <leader>w :w!<cr>
" tabs
map <leader>tn :tabnew<cr>
map <leader>tc :tabclose<cr>
map <leader>th :tabm-1<cr>
map <leader>tl :tabm+1<cr>
" cd to open buffer's pwd
map <leader>cd :cd %:p:h<cr>:pwd<cr>
" spell checking
map <leader>ss :setlocal spell!<cr>
" vimgrep (manual typing, word under cursor)
map <leader>gr :vimgrep //gj ./**/* <bar> cw<c-left><c-left><c-left><c-left><right>
xmap <leader>gr y:vimgrep '<c-r>"' ./**/* <bar> cw<cr>
" regex replace (manual typing, word under cursor)
map <leader>re :%s //g<left><left>
xmap <leader>re y:%s /<c-r>"//g<c-right><left><left>
" nerd tree
map <leader>nt :NERDTreeToggle<cr>
map <leader>mt :NERDTreeMirror<cr>
" vista
map <leader>tb :Vista!!<cr>
" ale
map <leader>ad :ALEDetail<cr>
map <leader>ah :ALEHover<cr>
map <leader>ag :ALEGoToDefinition -split<cr>
" easy align
xmap ga <plug>(EasyAlign)
nmap ga <plug>(EasyAlign)
" fzf
map <leader>f :call fzf#run(fzf#vim#with_preview({'source': 'fd . --type f', 'sink': 'e'}))<cr>

"
" file types
"

autocmd FileType mail setlocal spell spl=en_us " spellcheck email
autocmd FileType mail setlocal fo+=aw          " don't automatically break lines in emails

"
" startify header
"

let g:momiji = startify#center([
  \ '     ⣶                                 ⢀⣀⣀⣀⣀⣀⣀⡀       ',
  \ '  ⠰⣟⠓⣿⡾⢷⡄⣾⣛⣷          ⣀⣠⣤⣤⣤⣤⣶⣶⣶⣶⣶⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀      ',
  \ '  ⢤⣽⡷⣿ ⢸⡇⢻⣤⡴         ⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠿⠿⠿⠿⠿⠟⠛⠛⠛⠋⠉⠉⢿⣿⣿⣿⡇      ',
  \ '                     ⣿⣿⣿                   ⢸⣿⣿⣿⡇      ',
  \ '⢸⡇⢸⡇⠰⣟⠓ ⣾⣛⣷⠰⣟⠓       ⣿⣿⡇   ⣠⣧        ⣴⠶⣦    ⣿⣿⣿⡇      ',
  \ '⠘⣧⣼⠃⢤⣽⡷ ⢻⣤⡴⢤⣽⡷     ⣶⣿⣿⣿⡇  ⢰⡟⠘⣧⣀       ⣴⠋    ⣿⣿⣿⣧      ',
  \ '    ⠶       ⣶ ⣴⠶⣦  ⣿⡿⠿⠟⠃  ⢸⠁ ⠈⠛⢧⣄     ⣤     ⢹⣿⣿⣿⣄⣀⣀⣀⣀⡀',
  \ '⣿ ⣿ ⣿ ⣿⢻⣿⢻⡆ ⣿  ⣴⠋      ⢀⣠⡤⠜⠒⠛⠓⠶⠆⠙⠻⠶⣤⣀⡀      ⠸⠿⣿⣿⣿⣿⣿⣿⣿⣿',
  \ '⠙⢦⣿ ⣿ ⣿⠘⠋⢸⡇ ⣤  ⣤  ⢀⣀⣠⣴⠞⠋⠁          ⠈⠉⠛⠛⠒⠶⣦⣤⣤⣀    ⠉⠉⠙⠛⠻',
  \ '             ⢠⢴⣶⣿⣟⣻⣽⣯⡥⠶⢖⡿⠿⠃               ⠉⠙⠻⢶⣤⣤⣤⣤⣤⣄  ',
  \ '        ⢸⣿⣿⣿⡆⠘⣧⠈⠉⠉⠛⢛⣷⣤⣤⡟⠁      ⣀⣤⡾⠟⠂          ⠉⠻⣷⣄⣽⢿⡄ ',
  \ '         ⢿⣿⣿⡇ ⠸⣧   ⢘⣷⢦⣿⠁  ⢀⣠⣤⣶⡾⠋⠁                ⠙⢿⣄⢿⡀',
  \ '       ⣠⣶⣿⣿⣿⣿  ⠘⣷⡄ ⣨⡿⣹⡿⣀⣴⣞⡋⠁⣴⡿⠶⢒⡶                  ⠻⣾⣷',
  \ '     ⣠⣾⣿⣿⣿⣿⠟⠃   ⢹⣧⡾⣣⣾⠻⡷⠋⣶⡟⠻⣧   ⢸⠁                   ⢻⣿',
  \ '   ⣠⣿⣿⣿⡿⠟⠁    ⢠⡴⠟⣳⡟⠋⣠⠄  ⢿⣶⣾⠿  ⢀⡇            ⣀       ⠈⣿',
  \ '⢀⣴⣿⣿⡿⠋⠁   ⢀⣠⣴⣾⣿⢾⣾⠋⣠⠏⢁⡴⠊⣠      ⣼⡇           ⣠⠏        ⠹',
  \ '⢸⣿⣿⣿⡆ ⠶⠿⠿⠿⠟⠻⣿⡿⢻⣿ ⠈⠁⠐⠁⡤⠋⠁      ⠙⠷⠶⠶⠶⠾⣿⣿⣋⣠⡴⣿⡏   ⣀       ',
  \ ' ⣿⣿⣿⣿       ⣼⠇⢸⣿  ⡄                 ⣾⠋⠙⢿⡄⢀⠟    ⣿ ⡀  ⠻⣆',
  \ ' ⢹⣿⣿⣿⡇     ⣼⠇ ⠘⣿⡀ ⢇⡰     ⢶⣄⣀⡀       ⠻⣦⣴⢿⣹⠏⣀⣀⣴ ⢀⠇⣶⣿  ⢀⠙',
  \ ' ⠸⣿⣿⣿⡇    ⣠⠟   ⠹⣧       ⢠⡟⠉⠘⢷⣤⡤   ⢀⣠   ⠈⠛⠛⣻⡟⠁ ⣼⢰⡏⣿  ⣼ ',
  \ '  ⢿⣿⣿⣿   ⢠⣿ ⣀⣀⣤⣤⣿⣇      ⣾  ⢀⡾⠃   ⠐⠋⣠⠖⠋⣠⠄⢀⣼⠛  ⢰⣯⡿⢥⣿ ⣰⠃ ',
  \ '  ⢸⣿⣿⣿⡇  ⢸⠿⠛⠋⠉⠉ ⠈⠻⣦⡀    ⠹⣤⡴⠋        ⠴⠋⢁⣴⣛⣡⠖  ⣼⡿  ⣿⢠⡿⣿⡳',
  \ '  ⠸⣿⣿⣿⣷          ⣼⢻⣧⣄              ⢀⣠⣾⣿⣿⠛⠁  ⣴⠏⠁⠈⢣⣧⣾⣿⠛⠁',
  \ '   ⣿⣿⣿⣿⣀⣀⣀⣤⣤⡄   ⣼⠗⠋⢹⡿⣶⣄⣀         ⣠⣴⣿⣿⠟⠉     ⠉  ⢠⠜⣯⣤⣼⣶⣶',
  \ '   ⢸⣿⣿⣿⣿⣿⣿⣿⣿⡇      ⣼⠁⢉⣹⣿⣷⣶⣤⣀⣀⣀⣤⣖⣛⠋⣩⡿⠃       ⢠⡆⢠⡏    ⣿⠿',
  \ '    ⠻⠿⠿⠿⢿⣿⣿⡿⠁      ⠉⣿⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⢉⣵⠟         ⣼⣇⣾  ⣤  ⣿ ',
  \ '        ⢸⣿⣿⡟     ⢀⡶⠋⠉⠙⢦⡀      ⢀⣴⠟       ⢀⣤⣴⠎⣿⣹⠇⢠⣾⠻⣧⡀⣿⣠',
  \ '        ⣿⣿⣿⠁     ⣾     ⣷    ⢀⣴⠟⠁     ⣀⣠⡶⢟⣿⢿⣆⣿⡇⢀⡿⠃ ⠘⢿⣻⡟',
  \ ])
let g:startify_custom_header = g:momiji
